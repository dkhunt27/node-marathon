{
  // JSHint Default Configuration File (as on JSHint website)
  // See http://jshint.com/docs/ for more details
  // v2.9.1

  // http://jshint.com/docs/options/


  // Enforcing Options
  // When set to true, these options will make JSHint produce more warnings about your code.
  "bitwise"       : true,     // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.
  //"camelcase"               // DEPRECATED
  "curly"         : true,     // This option requires you to always put curly braces around blocks in loops and conditionals.
  //"enforceall"              // DEPRECATED
  "eqeqeq"        : true,     // This options prohibits the use of == and != in favor of === and !==.
  //"es3"                     // DEPRECATED
  //"es5"                     // DEPRECATED
  "esversion"     : 6,        // This option is used to specify the ECMAScript version to which the code must adhere: 3, 5, 6
  "forin"         : true,     // This option requires all for in loops to filter object's items. (obj.hasOwnProperty())
  "freeze"        : true,     // This options prohibits overwriting prototypes of native objects such as Array, Date and so on.
  "funcscope"     : true,    // This option suppresses warnings about declaring variables inside of control structures while accessing them later from the outside.
  "futurehostile" : true,     // This option enables warnings about the use of identifiers which are defined in future versions of JavaScript.
  //"globals" (see below)
  //"immed"                   // DEPRECATED
  //"indent"                  // DEPRECATED
  "iterator"      : true,    // This option suppresses warnings about the __iterator__ property.
  "latedef"       : true,     // This option prohibits the use of a variable before it was defined.
  "maxcomplexity" : false,    // This option lets you control cyclomatic complexity throughout your code.
  "maxdepth"      : false,    // This option lets you control how nested do you want your blocks to be:
  "maxerr"        : 50,       // This options allows you to set the maximum amount of warnings JSHint will produce before giving up. Default is 50.
  //"maxlen"                  // DEPRECATED
  "maxparams"     : 3,        // This option lets you set the max number of formal parameters allowed per function:
  "maxstatements" : false,    // This option lets you set the max number of statements allowed per function:
  //"newcap"                  // DEPRECATED
  "noarg"         : true,     // This option prohibits the use of arguments.caller and arguments.callee
  "nocomma"       : true,     // This option prohibits the use of the comma operator.
  //"noempty"                 // DEPRECATED
  "nonbsp"        : true,     // This option warns about "non-breaking whitespace" characters.
  "nonew"         : true,     // This option prohibits the use of constructor functions for side-effects.
  "notypeof"      : true,    // This option suppresses warnings about invalid typeof operator values
  //"predef" (see below)
  //"quotmark"                // DEPRECATED
  "shadow"        : true,    // This option suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope.
  "singleGroups"  : true,     // This option prohibits the use of the grouping operator when it is not strictly required.
  "strict"        : true,     // This option requires the code to run in ECMAScript 5's strict mode.
  "undef"         : true,     // This option prohibits the use of explicitly undeclared variables. (spotting leaking and mistyped variables)
  "unused"        : true,     // This option warns when you define and never use your variables.
  "varstmt"       : false,    // When set to true, the use of VariableStatements are forbidden.


  // Relaxing
  // When set to true, these options will make JSHint produce fewer warnings about your code.
  "asi"           : false,    // This option suppresses warnings about missing semicolons.
  "boss"          : false,    // This option suppresses warnings about the use of assignments in cases where comparisons are expected.
  "debug"         : false,    // This option suppresses warnings about the debugger statements in your code.
  "elision"       : false,    // This option tells JSHint that your code uses ES3 array elision elements, or empty elements
  "eqnull"        : false,    // This option suppresses warnings about == null comparisons.
  //"esnext"                  // DEPRECATED
  "evil"          : false,    // This option suppresses warnings about the use of eval.
  "expr"          : false,    // This option suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls.
  //"globalstrict"            // DEPRECATED
  "lastsemic"     : false,    // This option suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block:
  //"laxbreak"                // DEPRECATED
  //"laxcomma"                // DEPRECATED
  "loopfunc"      : false,    // This option suppresses warnings about functions inside of loops.
  "moz"           : false,    // This options tells JSHint that your code uses Mozilla JavaScript extensions.
  //"multistr"                // DEPRECATED
  "noyield"       : false,    // This option suppresses warnings about generator functions with no yield statement in them.
  "plusplus"      : false,    // This option prohibits the use of unary increment and decrement operators.
  "proto"         : false,    // This option suppresses warnings about the __proto__ property.
  "scripturl"     : false,    // This option suppresses warnings about the use of script-targeted URLsâ€”such as javascript:....
  //"sub"                     // DEPRECATED
  "supernew"      : false,    // This option suppresses warnings about "weird" constructions like new function () { ... } and new Object;.
  "validthis"     : false,    // This option suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function.
  "withstmt"      : false,    // This option suppresses warnings about the use of the with statement.


  // Environments
  // These options let JSHint know about some pre-defined global variables.
  "browser"       : true,     // This option defines globals exposed by modern browsers
  "browserify"    : false,    // This option defines globals available when using the Browserify tool to build a project.
  "couch"         : false,    // This option defines globals exposed by CouchDB.
  "devel"         : true,     // This option defines globals that are usually used for logging poor-man's debugging: console, alert, etc.
  "dojo"          : false,    // This option defines globals exposed by the Dojo Toolkit.
  "jasmine"       : false,    // This option defines globals exposed by the Jasmine unit testing framework.
  "jquery"        : true,     // This option defines globals exposed by the jQuery JavaScript library.
  "mocha"         : true,     // This option defines globals exposed by the "BDD" and "TDD" UIs of the Mocha unit testing framework.
  "module"        : false,    // This option informs JSHint that the input code describes an ECMAScript 6 module.
  "mootools"      : false,    // This option defines globals exposed by the MooTools JavaScript framework.
  "node"          : true,     // This option defines globals available when your code is running inside of the Node runtime environment.
  "nonstandard"   : false,    // This option defines non-standard but widely adopted globals such as escape and unescape.
  "phantom"       : false,    // This option defines globals available when your core is running inside of the PhantomJS runtime environment.
  "prototypejs"   : false,    // This option defines globals exposed by the Prototype JavaScript framework.
  "qunit"         : false,    // This option defines globals exposed by the QUnit unit testing framework.
  "rhino"         : false,    // This option defines globals available when your code is running inside of the Rhino runtime environment.
  "shelljs"       : false,    // This option defines globals exposed by the ShellJS library.
  "typed"         : false,    // This option defines globals for typed array constructors.
  "worker"        : false,    // This option defines globals available when your code is running inside of a Web Worker.
  "wsh"           : false,    // This option defines globals available when your code is running as a script for the Windows Script Host.
  "yui"           : false,    // This option defines globals exposed by the YUI JavaScript framework.


  //variables JSHint considers to be implicitly defined in the environment
  "predef": [],


  // This option can be used to specify a white list of global variables that are not formally defined in the source code.
  // Setting an entry to true enables reading and writing to that variable.
  // Setting it to false will trigger JSHint to consider that variable read-only.
  //
  // You can also define these inline, ie, /* global MYVAR: false, MYOTHERVAR: false */

  "globals": {}
}
